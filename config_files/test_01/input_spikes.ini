; IN spikes: DG-CA3-CA1 one-hot memory input
; 	Time until next operation:
;           + Learn: 7 ms -> if learning in ms 1, next operation come in ms 8 (show the pattern 3 times)
;           + Recall: 6 ms -> if recalling in ms 1, the result is shown in ms 7 and next operation come in ms 7 (show the pattern only once)

; Endianess:
; 	+ Little endian pattern: [100] = 4 and [001] = 1
; 	+ Big endian pattern: [100] = 1 and [001] = 4

[input_cue]
; Spikes (ms) that represent the cue of the memory in IN input population
;InputSpikesCue = [[1,2,3], [], []]
;InputSpikesCue = [[1,2,3, 11], [], []]
;InputSpikesCue = [[1,2,3, 8, 14,15,16, 21], [], [1,2,3, 8, 14,15,16, 21]]
InputSpikesCue = [[1,2,3, 8,9,10, 22, 28, 34,35,36, 48], [15,16,17, 41,42,43, 54], [1,2,3, 15,16,17, 22, 41,42,43, 54]]
[input_mem]
# Spikes (ms) that represent the memory in IN input population
;InputSpikesMem = [[1,2,3], [1,2,3],[1,2,3], [],[], [], [], [],[], [1,2,3]]
;InputSpikesMem = [[1,2,3], [1,2,3, 14,15,16],[1,2,3, 14,15,16], [14,15,16],[], [], [], [],[], []]
InputSpikesMem = [[1,2,3, 41,42,43], [1,2,3, 8,9,10, 41,42,43],[1,2,3, 8,9,10, 15,16,17, 34,35,36], [8,9,10, 15,16,17, 34,35,36],[15,16,17, 34,35,36], [], [], [],[34,35,36, 41,42,43], [34,35,36, 41,42,43]]
